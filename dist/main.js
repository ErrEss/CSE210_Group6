/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/database/database.js":
/*!**********************************!*\
  !*** ./src/database/database.js ***!
  \**********************************/
/***/ ((module) => {

eval("/**\r\n * Database module\r\n */\r\nclass Database {\r\n  /**\r\n     * @param {string} name Database Name\r\n     * @param {int} version Database Version\r\n     */\r\n  constructor(name, version) {\r\n    this.name = name;\r\n    this.version = version;\r\n    this.indexedDB = {};\r\n    this.database = indexedDB.open(name, version);\r\n  }\r\n  /**\r\n   * Initialize DB\r\n   * @param {string} fields Fields of indexedDB instance\r\n   * @return {Promise} promise\r\n   */\r\n  initialize(fields) {\r\n    return new Promise((resolve, reject) => {\r\n      this.database.onupgradeneeded = (event) => {\r\n        const instance = event.target.result;\r\n        const objectStore = instance.createObjectStore(this.name, {\r\n          keyPath: 'key',\r\n          autoIncrement: true,\r\n        });\r\n\r\n        if (typeof fields === 'string') {\r\n          fields = fields.split(',');\r\n        }\r\n        for (const field of fields) objectStore.createIndex(field, field);\r\n      };\r\n\r\n      this.database.onsuccess = (event) => {\r\n        console.log(`Database ${this.name}: created successfully`);\r\n        this.indexedDB = this.database.result;\r\n        resolve(this.indexedDB);\r\n      };\r\n      this.database.onerror = function(event) {\r\n        reject(new Error(`error opening database ${event.target.errorCode}`));\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Save a record to DB\r\n   * @param {Object} record Application object to be saved\r\n   * @return {Promise} promise\r\n   */\r\n  save(record) {\r\n    return new Promise((resolve, reject) => {\r\n      if (typeof record === 'object') {\r\n        // eslint-disable-next-line max-len\r\n        const transaction = this.indexedDB.transaction([this.name], 'readwrite');\r\n        const objectStore = transaction.objectStore(this.name);\r\n        const request = objectStore.add(record);\r\n        request.onsuccess = () => {\r\n          resolve(transaction);\r\n        };\r\n        request.onerror = () => {\r\n          reject(new Error('An object was expected.'));\r\n        };\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * getCursor\r\n   * @return {Cursor} Cursor\r\n   */\r\n  getCursor() {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.indexedDB.transaction([this.name], 'readonly');\r\n      const objectStore = transaction.objectStore(this.name);\r\n      const request = objectStore.openCursor();\r\n      request.onsuccess = (e) => {\r\n        resolve(request);\r\n      };\r\n      request.onerror = () => {\r\n        reject(new Error('Could not get cursor'));\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Get Record By Key\r\n   * @param {int} key\r\n   * @return {Object} record\r\n   */\r\n  getRecordByKey(key) {\r\n    return new Promise((resolve, reject) => {\r\n      if (typeof key === 'number') {\r\n        const transaction = this.indexedDB.transaction([this.name], 'readonly');\r\n        const objectStore = transaction.objectStore(this.name);\r\n        const request = objectStore.get(key);\r\n        request.onsuccess = () => {\r\n          resolve(request.result);\r\n        };\r\n      } else {\r\n        reject(new Error('Key expected to be a number.'));\r\n      }\r\n    });\r\n  }\r\n  /**\r\n   * get all records in db\r\n   * @return {Promise}\r\n   */\r\n  getAllRecords() {\r\n    return new Promise((resolve, reject) => {\r\n      const transaction = this.indexedDB.transaction([this.name], 'readonly');\r\n      const objectStore = transaction.objectStore(this.name);\r\n      const request = objectStore.openCursor();\r\n      const data = [];\r\n      request.onsuccess = (e) => {\r\n        const cursor = e.target.result;\r\n        if (cursor) {\r\n          data.push(cursor.value);\r\n          cursor.continue();\r\n        } else {\r\n          resolve(data);\r\n        }\r\n      };\r\n      request.onerror = () => {\r\n        reject(new Error('Could not get records'));\r\n      };\r\n    });\r\n  }\r\n  /**\r\n   * Updates a record in DB\r\n   * @param {Object} record\r\n   * @return {Promise} promise\r\n   */\r\n  update(record) {\r\n    return new Promise((resolve, reject) => {\r\n      if (typeof record === 'object') {\r\n        // eslint-disable-next-line max-len\r\n        const transaction = this.indexedDB.transaction([this.name], 'readwrite');\r\n        const objectStore = transaction.objectStore(this.name);\r\n        const request = objectStore.put(record);\r\n        console.log('Update type', typeof(request));\r\n        request.onsuccess = () => {\r\n          resolve(request.result);\r\n        };\r\n        request.onerror = () => {\r\n          reject(new Error('Could not update'));\r\n        };\r\n      } else {\r\n        reject(new Error('An object was expected'));\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Delete Record by Key\r\n   * @param {int} key\r\n   * @return {Promise} promise\r\n   */\r\n  remove(key) {\r\n    return new Promise((resolve, reject) => {\r\n      if (typeof key === 'number') {\r\n        // eslint-disable-next-line max-len\r\n        const transaction = this.indexedDB.transaction([this.name], 'readwrite');\r\n        const objectStore = transaction.objectStore(this.name);\r\n        const request = objectStore.delete(key);\r\n        request.onsuccess = () => {\r\n          resolve(request.result);\r\n        };\r\n      } else {\r\n        reject(new Error('key is not number'));\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = Database;\r\n\n\n//# sourceURL=webpack://cse210_group6/./src/database/database.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _database_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database/database */ \"./src/database/database.js\");\n/* harmony import */ var _database_database__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_database_database__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\n/**\r\n@param {LoadDatabase} loadDB Run on page load/refresh\r\n@listens LoadDatabase\r\n     */\r\ndocument.addEventListener('DOMContentLoaded', (loadDB) => {\r\n  const name = 'Applications';\r\n  const version = 1;\r\n  const fields = 'jobID,'+\r\n  'companyName,'+\r\n  'jobType,'+\r\n  'jobRole,'+\r\n  'doa,'+\r\n  'applicationStatus,'+\r\n  'description';\r\n  let appliedCount;\r\n  let inProgressCount;\r\n  let offerCount;\r\n  let rejectCount;\r\n  const database = new (_database_database__WEBPACK_IMPORTED_MODULE_0___default())(name, version);\r\n  database.initialize(fields).then(()=>showAppCards());\r\n  console.log(database);\r\n  // save button to save application in database\r\n  document.getElementById('save').onclick = addApplication;\r\n  // show form to call function to display form\r\n  document.getElementById('showForm').onclick = showApplicationForm;\r\n  // getting the element containing all job cards\r\n  const appCardContainer = document.querySelector('#app-card-container');\r\n  /**\r\n    Add Application Function\r\n    @param {event} event\r\n   */\r\n  function addApplication(event) {\r\n    event.preventDefault();\r\n    const jobID = document.getElementById('jobid').value;\r\n    const companyName = document.getElementById('cname').value;\r\n    const jobType =\r\n    findRadioSelectedValue(document.getElementsByName('jobtype'));\r\n    const jobRole = document.getElementById('jobrole').value;\r\n    const doa = document.getElementById('doa').value;\r\n    const applicationStatus = document.getElementById('status').value;\r\n    const description = document.getElementById('desc').value;\r\n    // craeting record in db\r\n    const application = {jobID: jobID,\r\n      companyName: companyName,\r\n      jobType: jobType,\r\n      jobRole: jobRole,\r\n      doa: doa,\r\n      applicationStatus: applicationStatus,\r\n      description: description,\r\n      lastUpdated: getCurrentDate()};\r\n    database.save(application)\r\n        .then((transaction) => {\r\n          document.getElementById('application-form').reset();\r\n          transaction.oncomplete = () => {\r\n            showAppCards();\r\n            console.log('added');\r\n          };\r\n        })\r\n        .catch((error) => console.log('error', error));\r\n  }\r\n\r\n  /**\r\n    * Function to fetch and create all cards from db\r\n    */\r\n  function showAppCards() {\r\n    // Leave the div for card container empty\r\n    while (appCardContainer.firstChild) {\r\n      appCardContainer.removeChild(appCardContainer.firstChild);\r\n    }\r\n    database.getAllRecords().then(\r\n        (data) => {\r\n          createAppCards(data);\r\n          console.log(appliedCount, inProgressCount, offerCount, rejectCount);\r\n        },\r\n    ).catch((e) => console.log(e, 'error in fetching all records'));\r\n  }\r\n\r\n  /**\r\n   * Create app cards for all records in db\r\n   * @param {Array} data\r\n   */\r\n  function createAppCards(data) {\r\n    if (data!==null && data.length>0) {\r\n      appliedCount=0;\r\n      inProgressCount=0;\r\n      offerCount=0;\r\n      rejectCount=0;\r\n      data.forEach(createJobCard);\r\n    } else {\r\n      createEmptyAppCard();\r\n    }\r\n  }\r\n  /**\r\n   * Function to create Empty card in case of no applications\r\n   * @param {Object} value\r\n   */\r\n  function createJobCard(value) {\r\n    // const {key,\r\n    //   jobID,\r\n    //   companyName,\r\n    //   jobType,\r\n    //   jobRole,\r\n    //   doa,\r\n    //   description,\r\n    //   applicationStatus} = value;\r\n    console.log(value);\r\n\r\n    const card = document.createElement('div');\r\n    card.setAttribute('class', 'card mb-3 mx-auto');\r\n    card.style = 'max-width: 750px;';\r\n\r\n    const row = document.createElement('div');\r\n    row.setAttribute('class', 'row g-0');\r\n    card.appendChild(row);\r\n    createJobCardColumnOne(row, value);\r\n    createJobCardColumnTwo(row, value.applicationStatus);\r\n    createJobCardColumnThree(row, value.key);\r\n    switch (value.applicationStatus) {\r\n      case 'applied':\r\n        appliedCount++;\r\n        break;\r\n      case 'inProgress':\r\n        inProgressCount++;\r\n        break;\r\n      case 'offer':\r\n        offerCount++;\r\n        break;\r\n      case 'reject':\r\n        rejectCount++;\r\n        break;\r\n    }\r\n    appCardContainer.appendChild(card);\r\n  }\r\n\r\n  /**\r\n  * Creates a job card with information populated\r\n  * @param {HTMLElement} parent\r\n  * @param {Object} value\r\n  * */\r\n  function createJobCardColumnOne(parent, value) {\r\n    const columnOne = document.createElement('div');\r\n    columnOne.setAttribute('class', 'col-md-8');\r\n    parent.appendChild(columnOne);\r\n\r\n    const bodyOne = document.createElement('div');\r\n    bodyOne.setAttribute('class', 'card-body');\r\n    columnOne.appendChild(bodyOne);\r\n\r\n    createCompanyNameElement(bodyOne, value.companyName);\r\n    createJobIDElement(bodyOne, value.jobID);\r\n    createJobTypeElement(bodyOne, value.jobType);\r\n    createJobRoleElement(bodyOne, value.jobRole);\r\n    createDateAppliedElement(bodyOne, value.doa);\r\n    createDescriptionElement(bodyOne, value.description);\r\n\r\n    // createLastUpdatedElement(bodyOne, job)\r\n  }\r\n\r\n  /**\r\n  * Creates a part of job card with status information\r\n  * @param {HTMLElement} parent\r\n  * @param {String} applicationStatus\r\n  * */\r\n  function createJobCardColumnTwo(parent, applicationStatus) {\r\n    const columnTwo = document.createElement('div');\r\n    columnTwo.setAttribute('class',\r\n        setStatusBackgroundColor(applicationStatus));\r\n    parent.appendChild(columnTwo);\r\n\r\n    const bodyTwo = document.createElement('div');\r\n    bodyTwo.setAttribute('class', 'card-body');\r\n    columnTwo.appendChild(bodyTwo);\r\n\r\n    const coloredColumn = document.createElement('div');\r\n    coloredColumn.setAttribute('class', 'd-flex justify-content-center');\r\n    bodyTwo.appendChild(coloredColumn);\r\n\r\n    const status = document.createElement('h5');\r\n    status.setAttribute('class', 'text-light');\r\n    status.innerHTML = applicationStatus;\r\n    coloredColumn.appendChild(status);\r\n  }\r\n\r\n  /**\r\n  * Creates a part of job card with edit, delete info\r\n  * @param {HTMLElement} parent\r\n  * @param {String} key\r\n  * */\r\n  function createJobCardColumnThree(parent, key) {\r\n    const columnThree = document.createElement('div');\r\n    columnThree.setAttribute('class', 'col-sm-1 btn-group-vertical btn-block');\r\n    parent.appendChild(columnThree);\r\n\r\n    addJobCardEditButton(columnThree, key);\r\n    addJobCardDeleteButton(columnThree, key);\r\n  }\r\n\r\n  /**\r\n * Creates an entry for company title in job card\r\n * @param {HTMLElement} parent\r\n * @param {String} cname\r\n */\r\n  function createCompanyNameElement(parent, cname) {\r\n    const cardTitle = document.createElement('h5');\r\n    cardTitle.innerHTML = cname; // cannot be null - form check added.\r\n    parent.appendChild(cardTitle);\r\n  }\r\n\r\n  /**\r\n * Creates an entry for jobType in job card\r\n * @param {HTMLElement} parent\r\n * @param {String} jobID\r\n */\r\n  function createJobIDElement(parent, jobID) {\r\n    const jobIDElement = document.createElement('p');\r\n    jobIDElement.setAttribute('class', 'card-text');\r\n    parent.appendChild(jobIDElement);\r\n\r\n    const mutedTextOne = document.createElement('text');\r\n    mutedTextOne.setAttribute('class', 'text-muted');\r\n    mutedTextOne.innerHTML = 'Job ID: ';\r\n    jobIDElement.appendChild(mutedTextOne);\r\n\r\n    const regularTextOne = document.createElement('text');\r\n    regularTextOne.innerHTML = jobID!==undefined ? jobID : '';\r\n    jobIDElement.appendChild(regularTextOne);\r\n  }\r\n\r\n  /**\r\n * Creates an entry for jobType in job card\r\n * @param {HTMLElement} parent\r\n * @param {String} jobType\r\n */\r\n  function createJobTypeElement(parent, jobType) {\r\n    const jobTypeElement = document.createElement('p');\r\n    jobTypeElement.setAttribute('class', 'card-text');\r\n    parent.appendChild(jobTypeElement);\r\n\r\n    const mutedTextOne = document.createElement('text');\r\n    mutedTextOne.setAttribute('class', 'text-muted');\r\n    mutedTextOne.innerHTML = 'Job Type: ';\r\n    jobTypeElement.appendChild(mutedTextOne);\r\n\r\n    const regularTextOne = document.createElement('text');\r\n    regularTextOne.innerHTML = jobType!==undefined ? jobType : '';\r\n    jobTypeElement.appendChild(regularTextOne);\r\n  }\r\n\r\n  /**\r\n   * Creates an entry for jobRole in job card\r\n   * @param {HTMLElement} parent\r\n   * @param {String} jobRole\r\n   */\r\n  function createJobRoleElement(parent, jobRole) {\r\n    const jobRoleElement = document.createElement('p');\r\n    jobRoleElement.setAttribute('class', 'card-text');\r\n    parent.appendChild(jobRoleElement);\r\n\r\n    const mutedTextTwo = document.createElement('text');\r\n    mutedTextTwo.setAttribute('class', 'text-muted');\r\n    mutedTextTwo.innerHTML = 'Job Role: ';\r\n    jobRoleElement.appendChild(mutedTextTwo);\r\n\r\n    const regularTextTwo = document.createElement('text');\r\n    regularTextTwo.innerHTML = jobRole!==undefined ? jobRole : '';\r\n    jobRoleElement.appendChild(regularTextTwo);\r\n  }\r\n  /**\r\n   * Creates an entry for description in job card\r\n   * @param {HTMLElement} parent\r\n   * @param {String} desc\r\n   */\r\n  function createDescriptionElement(parent, desc) {\r\n    const descElement = document.createElement('p');\r\n    descElement.setAttribute('class', 'card-text');\r\n    parent.appendChild(descElement);\r\n\r\n    const mutedTextTwo = document.createElement('text');\r\n    mutedTextTwo.setAttribute('class', 'text-muted');\r\n    mutedTextTwo.innerHTML = 'Description: ';\r\n    descElement.appendChild(mutedTextTwo);\r\n\r\n    const regularTextTwo = document.createElement('text');\r\n    regularTextTwo.innerHTML = desc!==undefined ? desc : '';\r\n    descElement.appendChild(regularTextTwo);\r\n  }\r\n  /**\r\n * Creates an entry for doa in job card\r\n * @param {HTMLElement} parent\r\n * @param {String} doa\r\n */\r\n  function createDateAppliedElement(parent, doa) {\r\n    const dateApplied = document.createElement('p');\r\n    dateApplied.setAttribute('class', 'card-text');\r\n    parent.appendChild(dateApplied);\r\n\r\n    const mutedTextTwo = document.createElement('text');\r\n    mutedTextTwo.setAttribute('class', 'text-muted');\r\n    mutedTextTwo.innerHTML = 'Date Applied: ';\r\n    dateApplied.appendChild(mutedTextTwo);\r\n\r\n    const regularTextTwo = document.createElement('text');\r\n    regularTextTwo.innerHTML = doa!==undefined ? doa : '';\r\n    dateApplied.appendChild(regularTextTwo);\r\n  }\r\n\r\n  // TODO: for use later\r\n  // function createLastUpdatedElement(parent, job) {\r\n  //   const lastUpdated = document.createElement('p');\r\n  //   lastUpdated.setAttribute('class', 'card-text');\r\n  //   const lastUpdatedText = document.createElement('small');\r\n  //   lastUpdatedText.setAttribute('class', 'text-muted');\r\n  //   lastUpdatedText.innerHTML = 'Last updated 3 mins ago';\r\n\r\n  //   lastUpdated.appendChild(lastUpdatedText);\r\n  //   parent.appendChild(lastUpdated);\r\n  // }\r\n\r\n  /**\r\n  * Creates a edit button of job card\r\n  * @param {HTMLElement} parent\r\n  *  @param {int} key\r\n  * */\r\n  function addJobCardEditButton(parent, key) {\r\n    const editButton = document.createElement('button');\r\n    editButton.type = 'button';\r\n    editButton.setAttribute('class', 'btn btn-light');\r\n    editButton.setAttribute('id', 'edit-app');\r\n    editButton.setAttribute('data-bs-toggle', 'modal');\r\n    editButton.setAttribute('data-bs-target', '#updateApp');\r\n    parent.appendChild(editButton);\r\n\r\n    const buttonText = document.createElement('p');\r\n    buttonText.setAttribute('class', 'text-info');\r\n    buttonText.innerHTML = 'edit';\r\n    editButton.appendChild(buttonText);\r\n  }\r\n\r\n  /**\r\n  * Creates a delete button of job card\r\n  * @param {HTMLElement} parent\r\n  * @param {int} key\r\n  * */\r\n  function addJobCardDeleteButton(parent, key) {\r\n    const deleteButton = document.createElement('button');\r\n    deleteButton.type = 'button';\r\n    deleteButton.setAttribute('class', 'btn btn-light');\r\n    deleteButton.setAttribute('id', 'delete-app');\r\n    addDelModal(deleteButton, key);\r\n    parent.appendChild(deleteButton);\r\n\r\n    const buttonText = document.createElement('p');\r\n    buttonText.setAttribute('class', 'text-danger');\r\n    buttonText.innerHTML = 'del';\r\n    deleteButton.appendChild(buttonText);\r\n  }\r\n\r\n  /**\r\n  * Creates a delete button of job card\r\n  * @param {HTMLElement} deleteButton\r\n  * @param {int} key\r\n  * */\r\n  function addDelModal(deleteButton, key) {\r\n    deleteButton.setAttribute('data-bs-toggle', 'modal');\r\n    deleteButton.setAttribute('data-bs-target', '#deleteApp');\r\n    const deleteButtonModal = document.querySelector('#deleteAppButton');\r\n    deleteButtonModal.setAttribute('data-id', key);\r\n    deleteButtonModal.onclick = deleteViaModal;\r\n  }\r\n  /**\r\n   * Adds delete functionality to delete button in modal\r\n   * @param {event} event\r\n   */\r\n  function deleteViaModal(event) {\r\n    event.preventDefault();\r\n    console.log(event.target);\r\n    const key = Number(event.target.getAttribute('data-id'));\r\n    deleteApplication(key);\r\n  }\r\n\r\n  /**\r\n * To set bg color indicating status of application.\r\n * @param {String} status\r\n * @return {String}\r\n */\r\n  function setStatusBackgroundColor(status) {\r\n    if (status == 'applied') {\r\n      return 'col-sm bg-warning';\r\n    } else if (status == 'inProgress') {\r\n      return 'col-sm bg-primary';\r\n    } else if (status == 'offer') {\r\n      return 'col-sm bg-success';\r\n    } else if (status == 'reject') {\r\n      return 'col-sm bg-danger';\r\n    } else {\r\n      return 'col-sm bg-muted';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function to create Empty card in case of no applications\r\n   */\r\n  function createEmptyAppCard() {\r\n    if (!appCardContainer.firstChild) {\r\n      const text = document.createElement('p');\r\n      text.textContent = 'No applications to show here!';\r\n      appCardContainer.appendChild(text);\r\n    }\r\n  }\r\n\r\n  /**\r\n    Show Application Form\r\n    @param {event} event\r\n   */\r\n  function showApplicationForm(event) {\r\n    event.preventDefault();\r\n    // enable the display of app form\r\n    console.log('Application Form Has Been Activated');\r\n    document.getElementById('application-form').style.display = '';\r\n  }\r\n\r\n  /**\r\n   * find the value selected in Radio button\r\n   * @param {HTMLElement} elements\r\n   * @return {string}\r\n   */\r\n  function findRadioSelectedValue(elements) {\r\n    let val = '';\r\n\r\n    for (let i = 0; i < elements.length; i++) {\r\n      if (elements[i].checked) {\r\n        val = elements[i].value;\r\n      }\r\n    }\r\n    return val;\r\n  }\r\n\r\n  /**\r\n   * Returns todays date in yyyy-mm-dd format\r\n   * @return {String} today's date\r\n   */\r\n  function getCurrentDate() {\r\n    let today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0');\r\n    const yyyy = today.getFullYear();\r\n    today = yyyy + '-' + mm + '-' + dd;\r\n    return today;\r\n  }\r\n\r\n  /**\r\n   * Function to succesfully delete the application.\r\n   * @param {int} key\r\n   */\r\n  function deleteApplication(key) {\r\n    database.remove(key)\r\n        .then((result) => {\r\n          showAppCards();\r\n          console.log(result);\r\n        })\r\n        .catch((error) => console.log('error in deleting record!', error));\r\n  }\r\n});\r\n\r\n\n\n//# sourceURL=webpack://cse210_group6/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;